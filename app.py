import streamlit as st
import os
from groq import Groq
import random

from langchain.chains import ConversationChain
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
from langchain_core.prompts import ChatPromptTemplate 

def setup_streamlit():
    spacer, col = st.columns([5, 1])  
    with col:  
        st.image('groqcloud_darkmode.png')

    st.title("Chat with Groq!")
    st.write("Hello! I'm your friendly Groq chatbot. I can help answer your questions, provide information, or just chat. I'm also super fast! Let's start our conversation!")

def setup_sidebar():
    st.sidebar.title('Customization')
    model = st.sidebar.selectbox(
        'Choose a model',
        ['mixtral-8x7b-32768', 'llama2-70b-4096']
    )
    conversational_memory_length = st.sidebar.slider('Conversational memory length:', 1, 10, value = 5)
    memory=ConversationBufferWindowMemory(k=conversational_memory_length)

def setup_chatbot():
    user_question = st.text_input("Ask a question:")

    # session state variable
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history=[]
    else:
        for message in st.session_state.chat_history:
            memory.save_context({'input':message['human']},{'output':message['AI']})

    # Initialize Groq Langchain chat object and conversation
    groq_chat = ChatGroq(
            groq_api_key='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', 
            messages=[
            # Set an optional system message. This sets the behavior of the
            # assistant and can be used to provide specific instructions for
            # how it should behave throughout the conversation.
            {
            "role": "system",
            "content": "you are a famous and chaty pirate."
            },
            # Set a user message for the assistant to respond to.
            {
            "role": "user",
            "content": "where is the treasure?",
            }],
            model_name=model
    )

    conversation = ConversationChain(
            llm=groq_chat,
            memory=memory

    )

    # If the user has asked a question,
    if user_question:

        # The chatbot's answer is generated by sending the full prompt to the Groq API.
        response = conversation(user_question)
        message = {'system':prompt,'human':user_question,'AI':response['response']}
        st.session_state.chat_history.append(message)
        st.write("Chatbot:", response['response'])
        st.write("system:", message['system'])

def main():
    setup_streamlit()
    setup_sidebar()
    setup_chatbot()

if __name__ == "__main__":
    main()